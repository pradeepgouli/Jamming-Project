{"ast":null,"code":"const client_id = '0fffad15716446bca0e5528c2490dfff';\nconst redirect_uri = 'http://localhost:3000';\nconst authorizationUrl = `https://accounts.spotify.com/authorize?client_id=${client_id}` + `&redirect_uri=${redirect_uri}&scope=playlist-modify-public&response_type=token`;\nlet currentAccessToken = '';\nlet expirationTimeInSeconds = 0;\nconst Spotify = {\n  getAccessToken: function () {\n    if (currentAccessToken) {\n      console.log('Access token already exists: ' + currentAccessToken);\n      return currentAccessToken;\n    }\n\n    ;\n    let accessToken = /access_token=(.*?)&/.exec(window.location.href);\n    let expirationTime = /expires_in=(.*)/.exec(window.location.href);\n\n    if (accessToken && expirationTime) {\n      console.log('Acquired access token: ' + accessToken);\n      currentAccessToken = accessToken[1];\n      expirationTimeInSeconds = expirationTime[1];\n      window.setTimeout(() => currentAccessToken = '', expirationTimeInSeconds * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return currentAccessToken;\n    } else {\n      console.log('No access token found.');\n      return '';\n    }\n  },\n  search: async function (searchTerm) {\n    let accessToken = await this.getAccessToken();\n\n    if (!accessToken) {\n      console.log('No access token present.');\n      sessionStorage.setItem('searchTerm', searchTerm);\n      window.location.replace(authorizationUrl);\n      return [];\n    }\n\n    const term = encodeURI(searchTerm);\n    return fetch(`https://api.spotify.com/v1/search?q=${term}&type=track`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      console.log('Search query failed.');\n    }, networkError => console.log(networkError.message)).then(jsonResponse => {\n      if (jsonResponse && jsonResponse.tracks) {\n        return jsonResponse.tracks.items.map(track => {\n          return {\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n          };\n        });\n      } else if (jsonResponse && jsonResponse.error) {\n        console.log(`Search query error: ${jsonResponse.error.message}`);\n      } else {\n        return [];\n      }\n    });\n  },\n  savePlaylist: async function (playlistName, playlistTracks) {\n    if (!playlistName || !playlistTracks || playlistTracks.length === 0) {\n      return;\n    }\n\n    let accessToken = await this.getAccessToken();\n\n    if (!accessToken) {\n      console.log('No access token present.'); // Save playlist information to session storage here\n\n      window.location.replace(authorizationUrl);\n      return;\n    } // Fetch user ID\n\n\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    };\n    const userID = await fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      console.log('Error querying user ID.');\n    }, networkError => console.log(networkError.message)).then(jsonResponse => {\n      if (jsonResponse && jsonResponse.id) {\n        return jsonResponse.id;\n      } else if (jsonResponse && jsonResponse.error) {\n        console.log(`Error querying user ID: ${jsonResponse.error.message}`);\n      }\n    });\n\n    if (!userID) {\n      return;\n    } // Create playlist\n\n\n    const playlistID = await fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        name: playlistName\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      console.log(`Error creating playlist ${playlistName}.`);\n    }, networkError => console.log(networkError.message)).then(jsonResponse => {\n      if (jsonResponse && jsonResponse.id) {\n        return jsonResponse.id;\n      } else if (jsonResponse && jsonResponse.error) {\n        console.log(`Error creating playlist ${playlistName}: ${jsonResponse.error.message}`);\n      }\n    });\n\n    if (!playlistID) {\n      return;\n    } // Save tracks to playlist\n\n\n    const snapshotID = await fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks?`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        uris: playlistTracks\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      console.log(`Error saving playlist ${playlistName}.`);\n    }, networkError => console.log(networkError.message)).then(jsonResponse => {\n      if (jsonResponse && jsonResponse.snapshot_id) {\n        return jsonResponse.snapshot_id;\n      } else if (jsonResponse && jsonResponse.error) {\n        console.log(`Error saving playlist ${playlistName}: ${jsonResponse.error.message}`);\n      }\n    });\n  }\n};\nexport { Spotify };","map":{"version":3,"sources":["C:/Users/prashant/OneDrive/Desktop/Jamming Project/jamming/src/util/Spotify.js"],"names":["client_id","redirect_uri","authorizationUrl","currentAccessToken","expirationTimeInSeconds","Spotify","getAccessToken","console","log","accessToken","exec","window","location","href","expirationTime","setTimeout","history","pushState","search","searchTerm","sessionStorage","setItem","replace","term","encodeURI","fetch","headers","Authorization","then","response","ok","json","networkError","message","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","error","savePlaylist","playlistName","playlistTracks","length","Accept","userID","playlistID","method","body","JSON","stringify","snapshotID","uris","snapshot_id"],"mappings":"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","sourcesContent":["const client_id = '0fffad15716446bca0e5528c2490dfff';\nconst redirect_uri = 'http://localhost:3000';\nconst authorizationUrl = `https://accounts.spotify.com/authorize?client_id=${client_id}` +\n  `&redirect_uri=${redirect_uri}&scope=playlist-modify-public&response_type=token`;\nlet currentAccessToken = '';\nlet expirationTimeInSeconds = 0;\n\nconst Spotify = {\n  getAccessToken: function() {\n    if (currentAccessToken) {\n      console.log('Access token already exists: ' + currentAccessToken);\n      return currentAccessToken;\n    };\n    let accessToken = /access_token=(.*?)&/.exec(window.location.href);\n    let expirationTime = /expires_in=(.*)/.exec(window.location.href);\n    if (accessToken && expirationTime) {\n      console.log('Acquired access token: ' + accessToken);\n      currentAccessToken = accessToken[1];\n      expirationTimeInSeconds = expirationTime[1];\n      window.setTimeout(() => currentAccessToken = '', expirationTimeInSeconds * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return currentAccessToken;\n    } else {\n      console.log('No access token found.');\n      return '';\n    }\n  },\n  search: async function(searchTerm) {\n    let accessToken = await this.getAccessToken();\n    if (!accessToken) {\n      console.log('No access token present.');\n      sessionStorage.setItem('searchTerm', searchTerm);\n      window.location.replace(authorizationUrl);\n      return [];\n    }\n\n    const term = encodeURI(searchTerm);\n    return fetch(`https://api.spotify.com/v1/search?q=${term}&type=track`, {\n      headers: { Authorization: `Bearer ${accessToken}` }\n    })\n    .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n        console.log('Search query failed.');\n    }, networkError => console.log(networkError.message)\n    )\n    .then(jsonResponse => {\n      if (jsonResponse && jsonResponse.tracks) {\n        return jsonResponse.tracks.items.map(track => {\n          return {\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n          }\n        });\n      }\n      else if (jsonResponse && jsonResponse.error) {\n        console.log(`Search query error: ${jsonResponse.error.message}`);\n      }\n      else {\n        return [];\n      }\n    });\n  },\n  savePlaylist: async function(playlistName, playlistTracks) {\n    if (!playlistName || !playlistTracks || playlistTracks.length === 0) {\n      return;\n    }\n\n    let accessToken = await this.getAccessToken();\n    if (!accessToken) {\n      console.log('No access token present.');\n      // Save playlist information to session storage here\n      window.location.replace(authorizationUrl);\n      return;\n    }\n\n    // Fetch user ID\n    const headers = { Authorization: `Bearer ${accessToken}`,\n                      Accept: 'application/json',\n                      'Content-Type': 'application/json'};\n    const userID = await fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      console.log('Error querying user ID.');\n    }, networkError => console.log(networkError.message)\n    )\n    .then(jsonResponse => {\n      if (jsonResponse && jsonResponse.id) {\n        return jsonResponse.id;\n      }\n      else if (jsonResponse && jsonResponse.error) {\n        console.log(`Error querying user ID: ${jsonResponse.error.message}`);\n      }\n    });\n\n    if (!userID) {\n      return;\n    }\n\n    // Create playlist\n    const playlistID = await fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({name: playlistName})\n    })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      console.log(`Error creating playlist ${playlistName}.`);\n    }, networkError => console.log(networkError.message)\n    )\n    .then(jsonResponse => {\n      if (jsonResponse && jsonResponse.id) {\n        return jsonResponse.id;\n      }\n      else if (jsonResponse && jsonResponse.error) {\n        console.log(`Error creating playlist ${playlistName}: ${jsonResponse.error.message}`);\n      }\n    });\n\n    if (!playlistID) {\n      return;\n    }\n\n    // Save tracks to playlist\n    const snapshotID = await fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks?`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({uris: playlistTracks})\n    })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      console.log(`Error saving playlist ${playlistName}.`);\n    }, networkError => console.log(networkError.message)\n    )\n    .then(jsonResponse => {\n      if (jsonResponse && jsonResponse.snapshot_id) {\n        return jsonResponse.snapshot_id;\n      }\n      else if (jsonResponse && jsonResponse.error) {\n        console.log(`Error saving playlist ${playlistName}: ${jsonResponse.error.message}`);\n      }\n    });\n\n  }\n}\n\n\n\nexport { Spotify };\n"]},"metadata":{},"sourceType":"module"}