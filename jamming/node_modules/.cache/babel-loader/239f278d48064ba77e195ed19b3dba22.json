{"ast":null,"code":"const userAccessToken = \"\";\nconst clientID = \"ab5457f50ef04bf5adcdc17dbc3cd948\";\nconst redirectURI = \"http://localhost:3000/\";\n\nclass Spotify {\n  static async search(searchTerm, token) {\n    const url = `https://api.spotify.com/v1/search?q=${searchTerm}&type=track`;\n    const response = await fetch(url, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const jsonResponse = await response.json();\n\n    if (jsonResponse.tracks.items) {\n      return jsonResponse.tracks.items.map(track => {\n        return {\n          id: track.id,\n          title: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name\n        };\n      });\n    }\n  }\n\n  static async createPlaylist(name, trackIds, token) {\n    if (Array.isArray(trackIds) && trackIds.length) {\n      const createPlaylistUrl = `https://api.spotify.com/v1/me/playlists`;\n      const response = await fetch(createPlaylistUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          name: name,\n          public: true\n        })\n      });\n      const jsonResponse = await response.json();\n      const playlistId = jsonResponse.id;\n\n      if (playlistId) {\n        const replacePlaylistTracksUrl = `https://api.spotify.com/v1/playlists/${playlistId}/tracks`;\n        await fetch(replacePlaylistTracksUrl, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            uris: trackIds.map(id => \"spotify:track:\".concat(id))\n          })\n        });\n      }\n    }\n  }\n\n}\n\nexport default Spotify;","map":{"version":3,"sources":["C:/Users/prashant/OneDrive/Desktop/Jamming Project/jamming/src/util/Spotify.js"],"names":["userAccessToken","clientID","redirectURI","Spotify","search","searchTerm","token","url","response","fetch","headers","Authorization","jsonResponse","json","tracks","items","map","track","id","title","name","artist","artists","album","createPlaylist","trackIds","Array","isArray","length","createPlaylistUrl","method","body","JSON","stringify","public","playlistId","replacePlaylistTracksUrl","uris","concat"],"mappings":"AAAA,MAAMA,eAAe,GAAG,EAAxB;AACA,MAAMC,QAAQ,GAAG,kCAAjB;AACA,MAAMC,WAAW,GAAG,wBAApB;;AACA,MAAMC,OAAN,CAAc;AACS,eAANC,MAAM,CAACC,UAAD,EAAaC,KAAb,EAAoB;AACnC,UAAMC,GAAG,GAAI,uCAAsCF,UAAW,aAA9D;AACA,UAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAM;AAC9BG,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,UAASL,KAAM;AAD1B;AADqB,KAAN,CAA5B;AAKA,UAAMM,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAA3B;;AACA,QAAID,YAAY,CAACE,MAAb,CAAoBC,KAAxB,EAA+B;AAC3B,aAAOH,YAAY,CAACE,MAAb,CAAoBC,KAApB,CAA0BC,GAA1B,CAA8BC,KAAK,IAAI;AAC1C,eAAO;AACHC,UAAAA,EAAE,EAAED,KAAK,CAACC,EADP;AAEHC,UAAAA,KAAK,EAAEF,KAAK,CAACG,IAFV;AAGHC,UAAAA,MAAM,EAAEJ,KAAK,CAACK,OAAN,CAAc,CAAd,EAAiBF,IAHtB;AAIHG,UAAAA,KAAK,EAAEN,KAAK,CAACM,KAAN,CAAYH;AAJhB,SAAP;AAMH,OAPM,CAAP;AAQH;AACJ;;AAC0B,eAAdI,cAAc,CAACJ,IAAD,EAAOK,QAAP,EAAiBnB,KAAjB,EAAwB;AAC/C,QAAIoB,KAAK,CAACC,OAAN,CAAcF,QAAd,KAA2BA,QAAQ,CAACG,MAAxC,EAAgD;AAC5C,YAAMC,iBAAiB,GAAI,yCAA3B;AACA,YAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAACoB,iBAAD,EAAoB;AAC5CC,QAAAA,MAAM,EAAE,MADoC;AAE5CpB,QAAAA,OAAO,EAAE;AACL,0BAAgB,kBADX;AAELC,UAAAA,aAAa,EAAG,UAASL,KAAM;AAF1B,SAFmC;AAM5CyB,QAAAA,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAe;AAClBb,UAAAA,IAAI,EAAEA,IADY;AAElBc,UAAAA,MAAM,EAAE;AAFU,SAAf;AANqC,OAApB,CAA5B;AAWA,YAAMtB,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAA3B;AACA,YAAMsB,UAAU,GAAGvB,YAAY,CAACM,EAAhC;;AACA,UAAIiB,UAAJ,EAAgB;AACZ,cAAMC,wBAAwB,GAAI,wCAAuCD,UAAW,SAApF;AACA,cAAM1B,KAAK,CAAC2B,wBAAD,EAA2B;AAClCN,UAAAA,MAAM,EAAE,KAD0B;AAElCpB,UAAAA,OAAO,EAAE;AACL,4BAAgB,kBADX;AAELC,YAAAA,aAAa,EAAG,UAASL,KAAM;AAF1B,WAFyB;AAMlCyB,UAAAA,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAe;AAACI,YAAAA,IAAI,EAAEZ,QAAQ,CAACT,GAAT,CAAaE,EAAE,IAAI,iBAAiBoB,MAAjB,CAAwBpB,EAAxB,CAAnB;AAAP,WAAf;AAN2B,SAA3B,CAAX;AAQH;AACJ;AACJ;;AAhDS;;AAmDd,eAAef,OAAf","sourcesContent":["const userAccessToken = \"\";\r\nconst clientID = \"ab5457f50ef04bf5adcdc17dbc3cd948\";\r\nconst redirectURI = \"http://localhost:3000/\";\r\nclass Spotify {\r\n    static async search(searchTerm, token) {\r\n        const url = `https://api.spotify.com/v1/search?q=${searchTerm}&type=track`\r\n        const response = await fetch(url, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`\r\n            }\r\n        });\r\n        const jsonResponse = await response.json();\r\n        if (jsonResponse.tracks.items) {\r\n            return jsonResponse.tracks.items.map(track => {\r\n                return {\r\n                    id: track.id,\r\n                    title: track.name,\r\n                    artist: track.artists[0].name,\r\n                    album: track.album.name\r\n                };\r\n            });\r\n        }\r\n    }\r\n    static async createPlaylist(name, trackIds, token) {\r\n        if (Array.isArray(trackIds) && trackIds.length) {\r\n            const createPlaylistUrl = `https://api.spotify.com/v1/me/playlists`\r\n            const response = await fetch(createPlaylistUrl, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${token}`\r\n                },\r\n                body : JSON.stringify({\r\n                    name: name,\r\n                    public: true\r\n                  })\r\n            });\r\n            const jsonResponse = await response.json();\r\n            const playlistId = jsonResponse.id;\r\n            if (playlistId) {\r\n                const replacePlaylistTracksUrl = `https://api.spotify.com/v1/playlists/${playlistId}/tracks`;\r\n                await fetch(replacePlaylistTracksUrl, {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: `Bearer ${token}`\r\n                    },\r\n                    body : JSON.stringify({uris: trackIds.map(id => \"spotify:track:\".concat(id))})\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}