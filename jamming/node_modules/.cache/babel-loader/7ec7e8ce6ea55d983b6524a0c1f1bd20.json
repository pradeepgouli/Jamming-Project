{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prashant\\\\OneDrive\\\\Desktop\\\\Jamming Project\\\\jamming\\\\src\\\\Components\\\\App\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { SearchResults } from './../SearchResults/SearchResults';\nimport { Playlist } from './../Playlist/Playlist';\nimport { SearchBar } from './../SearchBar/SearchBar';\nimport { Spotify } from './../../util/Spotify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'My playlist',\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  componentDidMount() {\n    // TODO: break this functionality out into a new function called parseUserAuthorization()\n    Spotify.getAccessToken();\n    const searchTerm = sessionStorage.getItem('searchTerm');\n\n    if (searchTerm) {\n      // Simply setting the input value with \"input.value =\" won't work as it\n      // doesn't trigger the React onChange event handler so we have to do this instead.\n      const searchTermInput = document.getElementById('searchTerm');\n      const setValue = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value').set;\n      const event = new Event('input', {\n        bubbles: true\n      });\n      setValue.call(searchTermInput, searchTerm);\n      searchTermInput.dispatchEvent(event);\n      this.search(searchTerm);\n      sessionStorage.removeItem('searchTerm');\n    }\n  }\n\n  addTrack(track) {\n    if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n\n    this.setState(prevState => ({\n      playlistTracks: [...prevState.playlistTracks, track]\n    }));\n  }\n\n  removeTrack(track) {\n    this.setState(prevState => ({\n      playlistTracks: prevState.playlistTracks.filter(item => item !== track)\n    }));\n  }\n\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    });\n  }\n\n  savePlaylist() {\n    let trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs);\n    this.setState({\n      playlistName: 'My playlist'\n    });\n    this.setState({\n      playlistTracks: []\n    });\n  }\n\n  search(searchTerm) {\n    Spotify.search(searchTerm).then(tracks => this.setState({\n      searchResults: tracks\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Ja\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"highlight\",\n          children: \"mmm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this), \"ing\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n          onSearch: this.search\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App-playlist\",\n          children: [/*#__PURE__*/_jsxDEV(SearchResults, {\n            searchResults: this.state.searchResults,\n            onAdd: this.addTrack\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n            playlistName: this.state.playlistName,\n            playlistTracks: this.state.playlistTracks,\n            onRemove: this.removeTrack,\n            onNameChange: this.updatePlaylistName,\n            onSave: this.savePlaylist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/prashant/OneDrive/Desktop/Jamming Project/jamming/src/Components/App/App.js"],"names":["React","Component","SearchResults","Playlist","SearchBar","Spotify","App","constructor","props","state","searchResults","playlistName","playlistTracks","addTrack","bind","removeTrack","updatePlaylistName","savePlaylist","search","componentDidMount","getAccessToken","searchTerm","sessionStorage","getItem","searchTermInput","document","getElementById","setValue","Object","getOwnPropertyDescriptor","HTMLInputElement","prototype","set","event","Event","bubbles","call","dispatchEvent","removeItem","track","find","savedTrack","id","setState","prevState","filter","item","name","trackURIs","map","uri","then","tracks","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { SearchResults } from './../SearchResults/SearchResults';\nimport { Playlist } from './../Playlist/Playlist';\nimport { SearchBar } from './../SearchBar/SearchBar';\nimport { Spotify } from './../../util/Spotify'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {searchResults: [],\n      playlistName: 'My playlist',\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  componentDidMount() {\n    // TODO: break this functionality out into a new function called parseUserAuthorization()\n    Spotify.getAccessToken();\n    const searchTerm = sessionStorage.getItem('searchTerm');\n    if (searchTerm) {\n      // Simply setting the input value with \"input.value =\" won't work as it\n      // doesn't trigger the React onChange event handler so we have to do this instead.\n      const searchTermInput = document.getElementById('searchTerm');\n      const setValue = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value').set;\n      const event = new Event('input', { bubbles: true });\n      setValue.call(searchTermInput, searchTerm);\n      searchTermInput.dispatchEvent(event);\n\n      this.search(searchTerm);\n      sessionStorage.removeItem('searchTerm');\n    }\n  }\n\n  addTrack(track) {\n    if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    this.setState(prevState => ({ playlistTracks: [...prevState.playlistTracks, track] }) );\n  }\n\n  removeTrack(track) {\n    this.setState(prevState => ({ playlistTracks: prevState.playlistTracks.filter(item => item !== track) }) );\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    let trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs);\n    this.setState({playlistName: 'My playlist'});\n    this.setState({playlistTracks: [] });\n  }\n\n  search(searchTerm) {\n    Spotify.search(searchTerm)\n    .then(tracks => this.setState({searchResults: tracks}));\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>\n            <Playlist playlistName={this.state.playlistName} playlistTracks={this.state.playlistTracks}\n               onRemove={this.removeTrack} onNameChange={this.updatePlaylistName} onSave={this.savePlaylist}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}